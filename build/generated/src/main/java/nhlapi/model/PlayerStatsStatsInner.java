/*
 * NHL API
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package nhlapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import nhlapi.model.PlayerStatsStatsInnerSplitsInner;
import nhlapi.model.PlayerStatsStatsInnerType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PlayerStatsStatsInner
 */
@JsonPropertyOrder({
  PlayerStatsStatsInner.JSON_PROPERTY_TYPE,
  PlayerStatsStatsInner.JSON_PROPERTY_SPLITS
})
@JsonTypeName("PlayerStats_stats_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-14T14:36:24.881091-05:00[America/Toronto]")
public class PlayerStatsStatsInner {
  public static final String JSON_PROPERTY_TYPE = "type";
  private PlayerStatsStatsInnerType type;

  public static final String JSON_PROPERTY_SPLITS = "splits";
  private List<PlayerStatsStatsInnerSplitsInner> splits = null;

  public PlayerStatsStatsInner() {
  }

  public PlayerStatsStatsInner type(PlayerStatsStatsInnerType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlayerStatsStatsInnerType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(PlayerStatsStatsInnerType type) {
    this.type = type;
  }


  public PlayerStatsStatsInner splits(List<PlayerStatsStatsInnerSplitsInner> splits) {
    
    this.splits = splits;
    return this;
  }

  public PlayerStatsStatsInner addSplitsItem(PlayerStatsStatsInnerSplitsInner splitsItem) {
    if (this.splits == null) {
      this.splits = new ArrayList<>();
    }
    this.splits.add(splitsItem);
    return this;
  }

   /**
   * Get splits
   * @return splits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SPLITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PlayerStatsStatsInnerSplitsInner> getSplits() {
    return splits;
  }


  @JsonProperty(JSON_PROPERTY_SPLITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplits(List<PlayerStatsStatsInnerSplitsInner> splits) {
    this.splits = splits;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerStatsStatsInner playerStatsStatsInner = (PlayerStatsStatsInner) o;
    return Objects.equals(this.type, playerStatsStatsInner.type) &&
        Objects.equals(this.splits, playerStatsStatsInner.splits);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, splits);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerStatsStatsInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    splits: ").append(toIndentedString(splits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

