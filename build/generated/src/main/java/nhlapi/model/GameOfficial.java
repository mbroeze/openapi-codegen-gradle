/*
 * NHL API
 * Documenting the publicly accessible portions of the NHL API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package nhlapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import nhlapi.model.GameOfficialOfficial;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GameOfficial
 */
@JsonPropertyOrder({
  GameOfficial.JSON_PROPERTY_OFFICIAL,
  GameOfficial.JSON_PROPERTY_OFFICIAL_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-14T14:36:24.881091-05:00[America/Toronto]")
public class GameOfficial {
  public static final String JSON_PROPERTY_OFFICIAL = "official";
  private GameOfficialOfficial official;

  /**
   * Gets or Sets officialType
   */
  public enum OfficialTypeEnum {
    LINESMAN("Linesman"),
    
    REFEREE("Referee");

    private String value;

    OfficialTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OfficialTypeEnum fromValue(String value) {
      for (OfficialTypeEnum b : OfficialTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OFFICIAL_TYPE = "officialType";
  private OfficialTypeEnum officialType;

  public GameOfficial() {
  }

  public GameOfficial official(GameOfficialOfficial official) {
    
    this.official = official;
    return this;
  }

   /**
   * Get official
   * @return official
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OFFICIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GameOfficialOfficial getOfficial() {
    return official;
  }


  @JsonProperty(JSON_PROPERTY_OFFICIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOfficial(GameOfficialOfficial official) {
    this.official = official;
  }


  public GameOfficial officialType(OfficialTypeEnum officialType) {
    
    this.officialType = officialType;
    return this;
  }

   /**
   * Get officialType
   * @return officialType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OFFICIAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OfficialTypeEnum getOfficialType() {
    return officialType;
  }


  @JsonProperty(JSON_PROPERTY_OFFICIAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOfficialType(OfficialTypeEnum officialType) {
    this.officialType = officialType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameOfficial gameOfficial = (GameOfficial) o;
    return Objects.equals(this.official, gameOfficial.official) &&
        Objects.equals(this.officialType, gameOfficial.officialType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(official, officialType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameOfficial {\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    officialType: ").append(toIndentedString(officialType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

